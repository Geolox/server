{"version":3,"sources":["../../../../server/api/category/category.integration.js"],"names":[],"mappings":"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","file":"category.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newCategory;\n\ndescribe('Category API:', function() {\n\n  describe('GET /api/categories', function() {\n    var categorys;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/categories')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          categorys = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      expect(categorys).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/categories', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/categories')\n        .send({\n          name: 'New Category',\n          info: 'This is the brand new category!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newCategory = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created category', function() {\n      expect(newCategory.name).to.equal('New Category');\n      expect(newCategory.info).to.equal('This is the brand new category!!!');\n    });\n\n  });\n\n  describe('GET /api/categories/:id', function() {\n    var category;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/categories/' + newCategory._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          category = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      category = {};\n    });\n\n    it('should respond with the requested category', function() {\n      expect(category.name).to.equal('New Category');\n      expect(category.info).to.equal('This is the brand new category!!!');\n    });\n\n  });\n\n  describe('PUT /api/categories/:id', function() {\n    var updatedCategory;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/categories/' + newCategory._id)\n        .send({\n          name: 'Updated Category',\n          info: 'This is the updated category!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedCategory = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedCategory = {};\n    });\n\n    it('should respond with the updated category', function() {\n      expect(updatedCategory.name).to.equal('Updated Category');\n      expect(updatedCategory.info).to.equal('This is the updated category!!!');\n    });\n\n  });\n\n  describe('DELETE /api/categories/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/categories/' + newCategory._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when category does not exist', function(done) {\n      request(app)\n        .delete('/api/categories/' + newCategory._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}